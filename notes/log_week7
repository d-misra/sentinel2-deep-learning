QGIS issues v frustrating 

- Sorted out DEM crs 
- Need to think about resolution difference: 1 pixel of DEM ~ 2x3 s2

4 types of segmentation: Felzenswalb (graph), Quickshift, SLIC and Compact watershed

More here: 

https://scikit-image.org/docs/dev/auto_examples/segmentation/plot_segmentations.html#sphx-glr-auto-examples-segmentation-plot-segmentations-py

- Got segmentation working with true colour image, Felzenszwalb looking good
	- Doesn't split up fields.
	- Felz and Quick only ones that pick up roads well. 

- Segment ID pixel idea

- Trying to change DEM res in QGIS

- validation set issue for s2 data

- in general, semantic segmentation yields better (homogeneous) results than patch-wise classification

- one patch only has one label, so many different classes are present in patch

The problem with semantic segmentation is the lack of public available training data. 

- could try to rasterize and generalize the OSM 

https://www.openstreetmap.org/ 

free land use vector data (Germany)
https://www.bezreg-koeln.nrw.de/brk_internet/geobasis/landschaftsmodelle/basis_dlm/index.html

after rasterization with gdal 
https://gdal.org/programs/gdal_rasterize.html 

data sets for aerial images, starting point for transfer learning

DEM stuff - dem vastly different extent meaning appearing on diff zone of display, even if on same CRS 

lit review begins 

- predicting on patches but going through each class making a decision on each 

-> patch method in order to train on new image which is broken up into patches 
	- would mean could use pretrained model which has been trained up on dataset of single-label images.
	- idea is that each patch to be predicted on in the new image would resemble the single-labelled training images. 

- back to segmentation getting rasterstats working
- tidied scripts 

- WKT vs geojson - WKT can support various CRSs whereas GeoJson coordinates are all in WGS 84. 
				 - WKT can support curved shapes, GeoJson cannot
				 
- WKT superior type for data parsing

- covariate shift - joint distribution of inputs and outputs differs between training and test stages.
- training data distribution - for patch-wise training this may not be an issue but if training on whole images then 
an issue

- segmentation still seems better -> still considering spatial context but also classifying every pixel. 

- need to figure out how to attach segment tags to pixel df 

- segmented (pixel-wise) done -> ~70% acc so far with 5000 points and primitive DNN

- more tidying

- band error: merge_bands was duplicating 4 bands to get 8
 - was reading jp2 files from two sources within S2A.SAFE directory 
 
- making separate segmentation script with just functions, import errors

- need to speed up code -> looping through pd dfs bad. need to use apply func and/or convert to np series
- cython?
- pandas is built on numpy which is designed for vector manipulation, making loops inefficient 
- have been using iterrows, this gives a tuple and is slow to loop through 


